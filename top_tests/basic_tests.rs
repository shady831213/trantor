mod common;
use common::*;
fn main() {
    let mut runner = RsicvTestRunner::new();
    //ui-p
    runner.test(XLen::X64, "rv64ui-p-add");
    runner.test(XLen::X64, "rv64ui-p-addi");
    runner.test(XLen::X64, "rv64ui-p-addiw");
    runner.test(XLen::X64, "rv64ui-p-addw");
    runner.test(XLen::X64, "rv64ui-p-and");
    runner.test(XLen::X64, "rv64ui-p-andi");
    runner.test(XLen::X64, "rv64ui-p-auipc");
    runner.test(XLen::X64, "rv64ui-p-beq");
    runner.test(XLen::X64, "rv64ui-p-bge");
    runner.test(XLen::X64, "rv64ui-p-bgeu");
    runner.test(XLen::X64, "rv64ui-p-blt");
    runner.test(XLen::X64, "rv64ui-p-bltu");
    runner.test(XLen::X64, "rv64ui-p-bne");
    runner.test(XLen::X64, "rv64ui-p-fence_i");
    runner.test(XLen::X64, "rv64ui-p-jal");
    runner.test(XLen::X64, "rv64ui-p-jalr");
    runner.test(XLen::X64, "rv64ui-p-lb");
    runner.test(XLen::X64, "rv64ui-p-lbu");
    runner.test(XLen::X64, "rv64ui-p-ld");
    runner.test(XLen::X64, "rv64ui-p-lh");
    runner.test(XLen::X64, "rv64ui-p-lhu");
    runner.test(XLen::X64, "rv64ui-p-lui");
    runner.test(XLen::X64, "rv64ui-p-lw");
    runner.test(XLen::X64, "rv64ui-p-lwu");
    runner.test(XLen::X64, "rv64ui-p-or");
    runner.test(XLen::X64, "rv64ui-p-ori");
    runner.test(XLen::X64, "rv64ui-p-sb");
    runner.test(XLen::X64, "rv64ui-p-sd");
    runner.test(XLen::X64, "rv64ui-p-sh");
    runner.test(XLen::X64, "rv64ui-p-simple");
    runner.test(XLen::X64, "rv64ui-p-sll");
    runner.test(XLen::X64, "rv64ui-p-slli");
    runner.test(XLen::X64, "rv64ui-p-slliw");
    runner.test(XLen::X64, "rv64ui-p-sllw");
    runner.test(XLen::X64, "rv64ui-p-slt");
    runner.test(XLen::X64, "rv64ui-p-slti");
    runner.test(XLen::X64, "rv64ui-p-sltiu");
    runner.test(XLen::X64, "rv64ui-p-sltu");
    runner.test(XLen::X64, "rv64ui-p-sra");
    runner.test(XLen::X64, "rv64ui-p-srai");
    runner.test(XLen::X64, "rv64ui-p-sraiw");
    runner.test(XLen::X64, "rv64ui-p-sraw");
    runner.test(XLen::X64, "rv64ui-p-srl");
    runner.test(XLen::X64, "rv64ui-p-srli");
    runner.test(XLen::X64, "rv64ui-p-srliw");
    runner.test(XLen::X64, "rv64ui-p-srlw");
    runner.test(XLen::X64, "rv64ui-p-sub");
    runner.test(XLen::X64, "rv64ui-p-subw");
    runner.test(XLen::X64, "rv64ui-p-xor");
    runner.test(XLen::X64, "rv64ui-p-xori");
    runner.test(XLen::X32, "rv32ui-p-add");
    runner.test(XLen::X32, "rv32ui-p-addi");
    runner.test(XLen::X32, "rv32ui-p-and");
    runner.test(XLen::X32, "rv32ui-p-andi");
    runner.test(XLen::X32, "rv32ui-p-auipc");
    runner.test(XLen::X32, "rv32ui-p-beq");
    runner.test(XLen::X32, "rv32ui-p-bge");
    runner.test(XLen::X32, "rv32ui-p-bgeu");
    runner.test(XLen::X32, "rv32ui-p-blt");
    runner.test(XLen::X32, "rv32ui-p-bltu");
    runner.test(XLen::X32, "rv32ui-p-bne");
    runner.test(XLen::X32, "rv32ui-p-fence_i");
    runner.test(XLen::X32, "rv32ui-p-jal");
    runner.test(XLen::X32, "rv32ui-p-jalr");
    runner.test(XLen::X32, "rv32ui-p-lb");
    runner.test(XLen::X32, "rv32ui-p-lbu");
    runner.test(XLen::X32, "rv32ui-p-lh");
    runner.test(XLen::X32, "rv32ui-p-lhu");
    runner.test(XLen::X32, "rv32ui-p-lui");
    runner.test(XLen::X32, "rv32ui-p-lw");
    runner.test(XLen::X32, "rv32ui-p-or");
    runner.test(XLen::X32, "rv32ui-p-ori");
    runner.test(XLen::X32, "rv32ui-p-sb");
    runner.test(XLen::X32, "rv32ui-p-sh");
    runner.test(XLen::X32, "rv32ui-p-simple");
    runner.test(XLen::X32, "rv32ui-p-sll");
    runner.test(XLen::X32, "rv32ui-p-slli");
    runner.test(XLen::X32, "rv32ui-p-slt");
    runner.test(XLen::X32, "rv32ui-p-slti");
    runner.test(XLen::X32, "rv32ui-p-sltiu");
    runner.test(XLen::X32, "rv32ui-p-sltu");
    runner.test(XLen::X32, "rv32ui-p-sra");
    runner.test(XLen::X32, "rv32ui-p-srai");
    runner.test(XLen::X32, "rv32ui-p-srl");
    runner.test(XLen::X32, "rv32ui-p-srli");
    runner.test(XLen::X32, "rv32ui-p-sub");
    runner.test(XLen::X32, "rv32ui-p-sw");
    runner.test(XLen::X32, "rv32ui-p-xor");
    runner.test(XLen::X32, "rv32ui-p-xori");
}
